---

interface Event {
  name: string;
  image: string;
  dates: string;
  dayName: string | null;
  monthName: string | null;
  hour: string | null;
}

// Función para obtener el nombre del día de la semana
function getDayName(dateString: string) {
    var days = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sabado'];
    var d = new Date(dateString);
    var dayName = days[d.getDay()];
    return dayName; 
}

// Función para obtener el nombre del mes
function getMonthDay(dateString: string) {
    // Crear una nueva fecha sin que se aplique automáticamente la conversión de zona horaria
    const [year, month, day] = dateString.split('-').map(Number);
    const date = new Date(year, month - 1, day); // Meses en JavaScript van de 0 a 11

    // Obtener el nombre del mes en español
    const monthName = date.toLocaleDateString('es-ES', { month: 'long' });
    
    // Obtener el número del día del mes
    const dayNumber = date.getDate();
    
    // Devolver el formato "día del mes de [nombre del mes]"
    return `${dayNumber} de ${monthName}`;
}

// Función para obtener la hora en formato normal
function getHourDay(timeString: string) {
    const date = new Date(`1970-01-01T${timeString}Z`); // Se usa una fecha arbitraria
    const options = { hour: 'numeric', minute: 'numeric', hour12: true } as const;
    return date.toLocaleTimeString('es-ES', options); // 'es-ES' para español
}

// Función para convertir la hora al formato de 12 horas (AM/PM) sin cambiar la zona horaria
function getFormatTimeTo12Hour(timeString: string) {
  // Separar horas y minutos
  const [hours, minutes] = timeString.split(':').map(Number);
  
  // Determinar AM o PM
  const ampm = hours >= 12 ? 'PM' : 'AM';
  
  // Convertir la hora al formato de 12 horas
  const hour12 = hours % 12 || 12;

  // Formatear la hora en formato de 12 horas con AM/PM
  return `${hour12}:${minutes.toString().padStart(2, '0')} ${ampm}`;
}

const response = await fetch(import.meta.env.API_EVENTOS_URL);
const data = await response.json();
console.log(data);
// const events = data.events
const events = data.map((event: any) => ({
    name: event.name,
    image: event.imagen,
    dates: event.dates?.start?.localDate,
    dayName: event.dates?.start?.localDate ? getDayName(event.dates.start.localDate) : null, 
    monthName: event.dates?.start?.localDate ? getMonthDay(event.dates.start.localDate) : null,
    hour: event.dates?.start?.localTime ? getFormatTimeTo12Hour(event.dates.start.localTime) : null,
})) || [];
console.log(events);



---
<!-- Lista de eventos -->
<div x-data="{
    search: '',
    items: [],
    async fetchItems() {
      const response = await fetch('https://autoevaluacion.umanizales.edu.co/events.json');
      const data = await response.json();
      this.items = data.map(event => ({
        name: event.name,  // Ajusta esto según la estructura de tu JSON
        icon: 'fas fa-lightbulb' // Cambia esto si tu JSON tiene un campo para el ícono
      }));
    }
  }" x-init="fetchItems()" class="w-full max-w-full mx-auto mt-8 px-4">
    <input type="text" x-model="search" placeholder="Buscar..." class="w-full text-6xl p-3 border border-gray-300 rounded-xl mb-4" />
    
    <div class="flex max-h-[800px] w-full flex-col overflow-y-scroll mt-12">
      <template x-for="item in items.filter(i => i.name.toLowerCase().includes(search.toLowerCase()))" :key="item.name">
        <button class="group flex items-center gap-x-5 rounded-md px-2.5 py-2 transition-all duration-75 hover:bg-green-100 mt-5">
          <div class="flex h-24 w-1/6 items-center group-hover:bg-green-200">
            <p class="tag w-full text-center text-5xl font-medium text-gray-600 group-hover:text-green-900">
              <i :class="'fas ' + item.icon" class="mr-2"></i>
            </p>
          </div>
          <div class="flex w-full flex-col items-start justify-between">
            <p class="text-left text-4xl text-slider-nav font-semibold" x-text="item.name"></p>
          </div>
        </button>
        <hr class="bg-yellow-500 h-1 w-1/2 -ml-28 items-center">
      </template>
    </div>
  </div>
  