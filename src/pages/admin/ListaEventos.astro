---
/// Listar eventos desde el fetch api
import { fetchEvents } from '../../utils/eventUtils.ts';
import type { Event } from '../../utils/eventUtils.ts';

const events: Event[] = await fetchEvents();

const url_image_api = import.meta.env.API_EVENTS_IMG;

/// Declaro de manera global la inicialización del metodo de borrar evento
declare global {
  interface Window {
    deleteEvent: (id: string) => Promise<void>;
    openEditModal: (
      eventId: string, 
      eventName: string, 
      eventDescription: string,
      eventModerator: string,
      eventPlace: string,
      eventMode: string,
      eventDate: string,
      eventFile: string
    ) => void;
  }  
}

---
<div id="event-list">
  <ul id="event-items" class="space-y-4 pt-20 pb-20">
    {events.map((event: Event) => (
      <li data-index="0" class="event-item p-4 bg-white shadow rounded-lg flex items-center justify-between">
        <!-- Contenedor de la imagen y la información del evento -->
        <div class="flex items-center space-x-4">
          <!-- Imagen del evento -->
          <img src={`${url_image_api}${event.image}`} alt={event.name} class="w-32 h-28 object-cover bg-center" />
          <!-- Información del evento -->
          <div>
            <h3 class="text-slider-nav font-semibold text-lg">{event.name}</h3>
            <p class="text-gray-500 w-28 truncate" set:html={event.description}></p>
            <time class="text-sm text-gray-400">
              {event.dayName} {event.dayNumber} de {event.monthName} a las {event.hour}
            </time>
          </div>
        </div>
        <div class="flex space-x-4">
          <a 
            class="text-blue-500 hover:text-blue-700 cursor-pointer"
            onclick={`openEditModal(
              '${event.id}', 
              '${event.name}', 
              '${event.description}', 
              '${event.moderator}', 
              '${event.place}', 
              '${event.mode}', 
              '${event.date}', 
              '${event.file}')`}>
            <i class="fas fa-edit"></i>
          </a>
          <button onclick={`deleteEvent('${event.id}')`} type="button" class="text-red-500 hover:text-red-700">
            <i class="fas fa-trash-alt"></i>
          </button>
        </div>
      </li>
    ))}
  </ul>
  <!-- Contenedor de paginación -->
  <div id="pagination" class="flex justify-center space-x-2 pb-16"></div>
</div>

<!-- Modal de Edición -->
<div id="editModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center">
  <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
    <form id="editForm" enctype="multipart/form-data"> 
      <h2 class="text-2xl text-slider-nav font-semibold text-left">Editar Evento</h2>
      <label class="hidden" for="eventId">ID del Evento</label>
      <input class="hidden" id="eventId" type="text" disabled />    
      <label class="mt-4 block text-md font-medium text-slider-nav" for="eventName">Nombre</label>
      <input class="mt-1 pl-3 block w-full h-10 bg-transparent rounded-md border-2 border-gray-400" required id="eventName" type="text" />    
      <label class="mt-2 block text-md font-medium text-slider-nav" for="eventDescription">Descripción</label>
      <textarea class="mt-1 block w-full p-2 border border-gray-300 rounded-md"  id="eventDescription"></textarea>    
      <label class="mt-2 block text-md font-medium text-slider-nav" for="eventModerator">Moderador</label>
      <input class="mt-1 pl-3 block w-full h-10 bg-transparent rounded-md border-2 border-gray-400" required id="eventModerator" type="text" />    
      <label class="mt-2 block text-md font-medium text-slider-nav" for="eventPlace">Lugar</label>
      <input class="mt-1 pl-3 block w-full h-10 bg-transparent rounded-md border-2 border-gray-400" required id="eventPlace" type="text" />    
      <label class="mt-2 block text-md font-medium text-slider-nav" for="eventMode">Modo</label>
      <input class="mt-1 pl-3 block w-full h-10 bg-transparent rounded-md border-2 border-gray-400" required id="eventMode" type="text" />    
      <label class="mt-2 block text-md font-medium text-slider-nav" for="eventDate">Fecha</label>
      <input class="mt-1 pl-3 block w-full h-10 bg-transparent rounded-md border-2 border-gray-400" required id="eventDate" type="datetime-local" />    
      <label class="mt-2 block text-md font-medium text-slider-nav" for="eventFile">Archivo</label>
      <input class="mt-1 block w-full text-sm text-color-iconos-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-gray-150 file:text-color-iconos hover:file:bg-gray-300" required id="eventFile" type="file" accept="image/*" />
      <!-- Botones para Guardar y Cerrar -->
      <div class="mt-4 flex justify-center space-x-2">
        <button type="submit" id="saveEventButton" class="rounded-full bg-botones text-slider-nav font-semibold py-2 px-14 hover:bg-botones-hover">Guardar</button>
        <button id="closeModalButton" class="px-14 py-2 bg-gray-500 text-white rounded-full hover:bg-gray-600">Cerrar</button>
      </div>
    </form>
  </div>
</div>

<!-- Mensaje de confirmación flotante -->
<div id="editConfirmationMessage" class="fixed top-4 right-4 hidden transition-opacity duration-500 ease-in-out">
  <div id="toast-success" class="flex items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert">
    <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-green-500 bg-green-100 rounded-lg dark:bg-green-800 dark:text-green-200">
        <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"/>
        </svg>
        <span class="sr-only">Check icon</span>
    </div>
    <div class="ms-3 text-sm font-normal">¡El evento fue modificado!</div>
    <button type="button" class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-success" aria-label="Close">
        <span class="sr-only">Close</span>
        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
        </svg>
    </button>
  </div>
</div>

<!-- Mensaje de confirmación flotante -->
<div id="confirmationMessage2" class="fixed top-4 right-4 hidden transition-opacity duration-500 ease-in-out">
  <div id="toast-danger" class="flex items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert">
    <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200">
        <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"/>
        </svg>
        <span class="sr-only">Error icon</span>
    </div>
    <div class="ms-3 text-sm font-normal">¡El evento ha sido eliminado!</div>
    <button type="button" class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-danger" aria-label="Close">
        <span class="sr-only">Close</span>
        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
        </svg>
    </button>
  </div>
</div>

<script>
  /// Ejecuta el código de paginación de eventos
  const eventsPerPage = 4;
  import { initializePagination } from '../../utils/pagination.ts';
  initializePagination(eventsPerPage);

  /// Ejecuta el código para eliminar eventos
  import { deleteEvent } from '../../utils/deleteEvent.ts';
  window.deleteEvent = deleteEvent;

  /// Ejecuta el código para editar eventos
  import { editEvent } from '../../utils/editEvent.ts';
  const editModal = document.getElementById("editModal");
  const eventIdInput = document.getElementById("eventId") as HTMLInputElement;
  const eventNameInput = document.getElementById("eventName") as HTMLInputElement;
  const eventDescriptionInput = document.getElementById("eventDescription") as HTMLInputElement;
  const eventModeratorInput = document.getElementById("eventModerator") as HTMLInputElement;
  const eventPlaceInput = document.getElementById("eventPlace") as HTMLInputElement;
  const eventModeInput = document.getElementById("eventMode") as HTMLInputElement;
  const eventDateInput = document.getElementById("eventDate") as HTMLInputElement;
  const eventFileInput = document.getElementById("eventFile") as HTMLInputElement;

  // Declaración de openEditModal en window
  window.openEditModal =  function(
    eventId, 
    eventName, 
    eventDescription, 
    eventModerator, 
    eventPlace, 
    eventMode, 
    eventDate, 
    eventFile
  ) 
  {
    if (editModal && eventIdInput && eventNameInput && eventDescriptionInput && eventModeratorInput && eventPlaceInput && eventModeInput && eventDateInput && eventFileInput) {
      editModal.classList.remove("hidden");
      // Asignar los valores de los parámetros a los campos del modal
      eventIdInput.value = eventId;
      eventNameInput.value = eventName;
      eventDescriptionInput.value = eventDescription;
      eventModeratorInput.value = eventModerator;
      eventPlaceInput.value = eventPlace;
      eventModeInput.value = eventMode;
      eventDateInput.value = eventDate;
      // eventFileInput.value = eventFile;
    } else {
      console.error("No se encontró uno o más elementos necesarios para abrir el modal de edición.");
    }
  };

    // Lógica para cerrar el modal
    document.getElementById("closeModalButton")?.addEventListener("click", () => {
      document.getElementById("editModal")?.classList.add("hidden");
    });

    // Guardar el evento al hacer clic en "Guardar"
    document.getElementById("saveEventButton")?.addEventListener("click", async () => {
      const eventData = {
        id: eventIdInput.value,
        name: eventNameInput.value,
        description: eventDescriptionInput.value,
        moderator: eventModeratorInput.value,
        place: eventPlaceInput.value,
        mode: eventModeInput.value,
        date: eventDateInput.value,
        file: eventFileInput.files![0],
      };

      await editEvent(eventData);
      console.log(eventData)
      document.getElementById("editModal")?.classList.add("hidden");
      window.location.reload(); // Recargar la página para ver los cambios
    });

</script>