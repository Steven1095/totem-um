---
/// Listar eventos desde el fetch api
import { fetchEvents } from '../../utils/eventUtils.ts';
import type { Event } from '../../utils/eventUtils.ts';

const events: Event[] = await fetchEvents();
const { id } = Astro.props;

const url_image_api = import.meta.env.API_EVENTS_IMG;

/// Declaro de manera global la inicialización del metodo de borrar evento
declare global {
  interface Window {
    deleteEvent: (id: string) => Promise<void>;
  }
}

---
<div id="event-list">
  <ul id="event-items" class="space-y-4 pt-20 pb-20">
    {events.map((event: Event) => (
      <li data-index="0" class="event-item p-4 bg-white shadow rounded-lg flex items-center justify-between">
        <!-- Contenedor de la imagen y la información del evento -->
        <div class="flex items-center space-x-4">
          <!-- Imagen del evento -->
          <img src={`${url_image_api}${event.image}`} alt={event.name} class="w-32 h-28 object-cover bg-center" />

          <!-- Información del evento -->
          <div>
            <h3 class="text-slider-nav font-semibold text-lg">{event.name}</h3>
            <p class="text-gray-500 w-28 truncate" set:html={event.description}></p>
            <time class="text-sm text-gray-400">
              {event.dayName} {event.dayNumber} de {event.monthName} a las {event.hour}
            </time>
          </div>
        </div>
        <!-- Botones de acción alineados a la derecha -->
        <div class="flex space-x-4">
          <!-- Botón de Editar -->
          <a href={`/admin/evento/edit/${event.id}`} class="text-blue-500 hover:text-blue-700">
            <i class="fas fa-edit"></i> <!-- Icono de editar -->
          </a>
          <!-- Botón de Eliminar -->
          <button onclick={`deleteEvent('${event.id}')`} type="button" class="text-red-500 hover:text-red-700">
            <i class="fas fa-trash-alt"></i> <!-- Icono de eliminar -->
          </button>
        </div>
      </li>
    ))}
  </ul>
  <!-- Contenedor de paginación -->
  <div id="pagination" class="flex justify-center space-x-2 pb-16"></div>
</div>
<!-- Mensaje de confirmación flotante -->
<div id="confirmationMessage2" class="fixed top-4 right-4 hidden transition-opacity duration-500 ease-in-out">
  <div id="toast-danger" class="flex items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert">
    <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200">
        <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"/>
        </svg>
        <span class="sr-only">Error icon</span>
    </div>
    <div class="ms-3 text-sm font-normal">¡El evento ha sido eliminado!</div>
    <button type="button" class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-danger" aria-label="Close">
        <span class="sr-only">Close</span>
        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
        </svg>
    </button>
  </div>
</div>

<script>
  window.deleteEvent = async function (id:string) {
    try {
        const response = await fetch(`https://api-dev.umanizales.edu.co/api/v1/module/totem-um/event/${id}`, {
            method: 'DELETE',
        });
        if (response.ok) {
          const confirmationMessage2 = document.getElementById("confirmationMessage2");
          if (confirmationMessage2) {
            confirmationMessage2.classList.remove("hidden", "opacity-0");
            confirmationMessage2.classList.add("opacity-100");
            setTimeout(() => {
              confirmationMessage2.classList.add("opacity-0");
              setTimeout(() => {
                confirmationMessage2.classList.add("hidden");
                window.location.reload();
              }, 500);
            }, 3000);
          } else {
            console.error("El elemento de confirmación no existe en el DOM.");
          }
        } else {
            console.error('Error al eliminar el evento');
        }
    } catch (error) {
        console.error('Error:', error);
    }
  }
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const eventsPerPage = 5;
    const eventItems = document.querySelectorAll(".event-item");
    const totalPages = Math.ceil(eventItems.length / eventsPerPage);
    const paginationContainer = (document.getElementById("pagination") as HTMLElement);

    let currentPage = 1;

    function renderPagination() {
      paginationContainer.innerHTML = ""; // Limpiar la paginación antes de renderizar

      // Botón de "Anterior"
      const prevButton = document.createElement("button");
      prevButton.innerHTML = "⟨"; // Símbolo de flecha izquierda
      prevButton.className = `flex items-center justify-center text-lg font-black ${
        currentPage === 1 ? "text-gray-400 cursor-not-allowed" : "text-botones cursor-pointer"
      }`;
      prevButton.disabled = currentPage === 1; // Deshabilitar el botón si estamos en la primera página


      prevButton.addEventListener("click", () => {
        if (currentPage > 1) {
          currentPage--;
          displayEvents();
          renderPagination(); // Asegurarse de actualizar la paginación
        }
      });
      paginationContainer.appendChild(prevButton);

      // Botones de números de página
      for (let i = 1; i <= totalPages; i++) {
        const pageButton = document.createElement("button");
        pageButton.textContent = i.toString(); // Convertimos `i` a cadena
        pageButton.className = `px-3 py-1 rounded-full ${
          i === currentPage ? "bg-botones text-slider-nav font-semibold" : "text-slider-nav font-semibold" 
        } cursor-pointer`;
        pageButton.addEventListener("click", () => {
          currentPage = i;
          displayEvents();
          renderPagination(); // Asegurarse de actualizar la paginación
        });
        paginationContainer.appendChild(pageButton);
    }

    // Botón de "Siguiente"
    const nextButton = document.createElement("button");
    nextButton.textContent = "⟩";
    nextButton.className = `flex items-center justify-center text-lg font-black ${
      currentPage === totalPages ? "text-gray-400 cursor-not-allowed" : "text-botones cursor-pointer"
    }`;
    nextButton.disabled = currentPage === totalPages; // Deshabilitar el botón si estamos en la última página
    nextButton.addEventListener("click", () => {
      if (currentPage < totalPages) {
        currentPage++;
        displayEvents();
        renderPagination(); // Asegurarse de actualizar la paginación
      }
    });
    paginationContainer.appendChild(nextButton);
  }

  function displayEvents() {
    const start = (currentPage - 1) * eventsPerPage;
    const end = start + eventsPerPage;

    eventItems.forEach((item, index) => {
        const eventItem = item as HTMLElement;
        eventItem.style.display = index >= start && index < end ? "flex" : "none";
    });
  }

  // Inicializar el paginador y mostrar la primera página
  renderPagination();
  displayEvents();
});

</script>