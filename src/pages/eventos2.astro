---
interface Event {
  id: string;
  name: string; // Cambiado a 'name'
  dates: {
    localDate: string;
  };
}

const res = await fetch('https://autoevaluacion.umanizales.edu.co/events.json');
const events: Event[] = await res.json();
console.log(events); // Verifica que los datos coincidan con la interfaz
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Buscador de Eventos</title>
  </head>
  <body class="bg-gray-100 p-6">
    <!-- Pasamos los eventos directamente en el x-data -->
    <div x-data="searchComponent({ events: <?= JSON.stringify(events) ?> })" class="container mx-auto">
      <!-- Input de búsqueda -->
      <div class="mb-4">
        <input 
          type="text" 
          x-model="query"  
          placeholder="Buscar eventos..." 
          class="w-full p-2 border rounded-md"
        />
      </div>

      <!-- Mostrar resultados filtrados -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <template x-for="event in filteredEvents" :key="event.id">
          <div class="p-4 bg-white shadow-md rounded-md">
            <h2 class="text-xl font-bold" x-text="event.name"></h2> <!-- Aseguramos que se usa 'name' -->
            <p x-text="event.dates.localDate"></p>
          </div>
        </template>
      </div>

      <!-- Mensaje si no hay resultados -->
      <div x-show="filteredEvents.length === 0">
        <p>No se encontraron eventos</p>
      </div>
    </div>

    <script>
      // Definir el componente Alpine.js con el tipo de los eventos explícito
      function searchComponent({ events }: { events: Event[] }) {
        return {
          query: '',  // Aseguramos que query esté definido
          events,     // Los eventos cargados
          get filteredEvents() {
            if (!this.query) {
              return this.events;
            }
            // Filtrar los eventos que coincidan con la búsqueda
            return this.events.filter(event => 
              event.name.toLowerCase().includes(this.query.toLowerCase())  // query está accesible
            );
          }
        };
      }
    </script>
  </body>
</html>
